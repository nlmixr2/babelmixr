% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nonmemControl.R
\name{nonmemControl}
\alias{nonmemControl}
\title{NONMEM estimation control}
\usage{
nonmemControl(
  est = c("focei", "imp", "its", "posthoc"),
  advanOde = c("advan13", "advan8", "advan6"),
  cov = c("r,s", "r", "s", ""),
  maxeval = 1e+05,
  tol = 6,
  sigl = 12,
  sigdig = 3,
  print = 1,
  extension = getOption("babelmixr2.nmModelExtension", ".nmctl"),
  outputExtension = getOption("babelmixr2.nmOutputExtension", ".lst"),
  runCommand = getOption("babelmixr2.nonmem", ""),
  iniSigDig = 5,
  protectZeros = TRUE,
  muRef = TRUE,
  addProp = c("combined2", "combined1"),
  rxControl = NULL,
  sumProd = FALSE,
  optExpression = TRUE,
  calcTables = TRUE,
  compress = TRUE,
  ci = 0.95,
  sigdigTable = NULL,
  readRounding = FALSE,
  readBadOpt = FALSE,
  niter = 100L,
  isample = 1000L,
  iaccept = 0.4,
  iscaleMin = 0.1,
  iscaleMax = 10,
  df = 4,
  seed = 14456,
  mapiter = 1,
  mapinter = 0,
  noabort = TRUE,
  ...
)
}
\arguments{
\item{est}{NONMEM estimation method}

\item{advanOde}{The ODE solving method for NONMEM}

\item{cov}{The NONMEM covariance method}

\item{maxeval}{NONMEM's maxeval (for non posthoc methods)}

\item{tol}{NONMEM tolerance for ODE solving advan}

\item{sigl}{NONMEM sigl estimation option}

\item{sigdig}{the significant digits for NONMEM}

\item{print}{The print number for NONMEM}

\item{extension}{NONMEM file extensions}

\item{outputExtension}{Extension to use for the NONMEM output
listing}

\item{runCommand}{Command to run NONMEM (typically the path to "nmfe75") or a
function with an argument \code{ui}.  See the details for more information.}

\item{iniSigDig}{How many significant digits are printed in $THETA
and $OMEGA when the estimate is zero.  Also controls the zero
protection numbers}

\item{protectZeros}{Add methods to protect divide by zero}

\item{muRef}{Automatically mu-reference the control stream}

\item{addProp, sumProd, optExpression, calcTables, compress, ci, sigdigTable}{Passed to \code{nlmixr2est::foceiControl}}

\item{rxControl}{Options to pass to \code{rxode2::rxControl} for
simulations}

\item{readRounding}{Try to read NONMEM output when NONMEM
terminated due to rounding errors}

\item{readBadOpt}{Try to read NONMEM output when NONMEM terminated
due to an apparent failed optimization}

\item{noabort}{Add the `NOABORT` option for `$EST`}

\item{...}{optional \code{genRxControl} argument controlling
automatic \code{rxControl} generation.}
}
\value{
babelmixr2 control option for generating NONMEM control stream and
  reading it back into `babelmixr2`/`nlmixr2`
}
\description{
NONMEM estimation control
}
\details{
If \code{runCommand} is given as a string, it will be called with the
\code{system()} command like:

\code{runCommand controlFile outputFile}.

For example, if \code{runCommand="'/path/to/nmfe75'"} then the command line
used would look like the following:

\code{'/path/to/nmfe75' one.cmt.nmctl one.cmt.lst}

If \code{runCommand} is given as a function, it will be called as
\code{FUN(ui)} to run NONMEM.  This allows you to run NONMEM in any way that
you may need, as long as you can write it in R.  You will need to run NONMEM
where the files are in the \code{ui$nonmemExportPath} directory, the control
stream is in \code{ui$nonmemNmctl}, and all outputs must be placed in the
same directory when the run is complete.  babelmixr2 will wait for the NONMEM
XML output file (\code{ui$nonmemXml}) to exist in the directory before
proceeding.
}
\examples{
nonmemControl()
}
\author{
Matthew L. Fidler
}
